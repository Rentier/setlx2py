



drawBase := procedure( disks ){
    gfx_setPenColor("BLACK");
    diskHalf := disks / 2;
    for( i in [0 .. 2] ){
        gfx_filledRectangle( diskHalf + disks*i, diskHalf/2+0.5, 0.1, diskHalf/2+0.5 ); 
    }
};

drawState := procedure( state, disks ){
    for( i in [1 .. 3] ){
        diskNumber := 0;
        while( #state[i] > 0  ){
            disk := fromE( state[i] );
            discfactor := disk/disks;
            if ( disk == 1 ){
                discfactor := 0.0;
            }
            r := discfactor;
            g := 1.0-discfactor;
            b := 0.0;
            gfx_setPenColorRGB( r, g, b ); 
            gfx_filledRectangle(  disks/2 + disks*(i-1), diskNumber/2 + 0.25, disk/2, 0.25 ); 
            diskNumber := diskNumber + 1;
        }
    }
};


moveVertical := procedure(state,position,down,disks){
    disksize := fromB( state[position] );
    diskposition := #state[position];
    if ( !down ){
        y := ((diskposition/2) + 0.25);
    }else{
        y := (disks/2+1.5);
    }
    i := 0;
    while(   (!down && ((diskposition/2) + 0.25 + i) <= (disks/2+1.5))
          || ( down && ((diskposition/2) + 0.25)     <= (disks/2+1.5)+i)   
    ){
        gfx_clear();
        drawBase(disks);
        drawState(state,disks);
        gfx_filledRectangle(  disks/2+disks*(position-1), y+i, disksize/2, 0.25 );
        if ( down ){
            i := i - 0.1;
        }else{
            i := i + 0.1;
        }
        gfx_show(1);        
    } 
};


moveUp := procedure(old,from,disks){
    moveVertical(old,from,false,disks);
};

moveDown := procedure(new,to,disks){
    moveVertical(new,to,true,disks);
};

moveHorizontal := procedure(old,from,to,disks){
    disksize := fromB( old[from] );
    diskposition := #old[from];
    if ( from < to ){
        right := true;
    }else{
        right := false;
    }
    i := from;
    while( (right && i <= to) || (!right && i >= to) ){
        gfx_clear();
        drawBase(disks);
        drawState(old,disks);
        gfx_filledRectangle(disks/2+disks*(i-1), (disks/2+1.5), disksize/2, 0.25 );
        gfx_show(1);
        if ( right ){
            i := i + 0.1;
        }else{
            i := i - 0.1;
        }
    }
};

animateTransition := procedure( old, new, disks ){
    from := 0;
    to   := 0; 
    for( i in [1 .. 3] ){
        if ( #new[i] > #old[i] ){
            to := i;
        }
        if ( #old[i] > #new[i] ){
            from := i;
        }
    }
    moveUp(old,from,disks);
    moveHorizontal(old,from,to,disks);
    moveDown(new,to,disks);
    
};

animate := procedure( disks ){
    algorithm := hanoi( disks ); 
    print( algorithm );
    xmax := (disks * 3) + 2;
    ymax := (disks * 2) + 2;
    gfx_setXscale( 0, xmax );
    gfx_setYscale( 0, ymax );
    begin := true;
    while( #algorithm > 0 ){
        nextState := fromE( algorithm );
        if ( !begin ){
            animateTransition( lastState, nextState, disks );
        }else{
            begin := false;
        }
        gfx_clear();
        drawBase( disks );
        drawState( nextState, disks );
        lastState := nextState;
        gfx_show( 500 );
    }
    animate( readInput() );
};

waitForStart := procedure(){
    while( gfx_isPaused() ){
        sleep(1000);
    }
};

readInput := procedure(){
    gfx_setPaused(true);
    gfx_setMessage( "Please enter the size of the hanoi towers!" );
    gfx_addInputField( "Size" );
    gfx_addPlayPauseButton(true);
    gfx_addSpeedSlider(true);
    waitForStart();
    input := rational( gfx_getInput() );
    while ( input == om ){
        gfx_setMessage("The given size is not a number! Please enter a number for the size of the hanoi towers!" );
        gfx_setPaused(true);
        waitForStart();
        input := rational( gfx_getInput() );
    }
    gfx_setMessage("Animation starts after calculating the path with A* algorithm.");
    return input;
};

load("aStar_hanoi_exact_animation.stlx");

gfx_setCanvasSize( 600, 400 );
animate( readInput() );


