
lastChars := procedure(x, n) {
	s := str(x);
	m := n - #s;
	return m * " " + s;
};

partition := procedure(s1, s2, s3, all) {
	test := {s1, s2, s3} <= pow(all);
	test2 := forall(x in all | (x in s1 && x notin s2 + s3) || (x in s2 && x notin s1 + s3) || (x in s3 && x notin s1 + s2));
	test3 := forall(k in {s1, s2, s3}, l in {s1, s2, s3} | k * l == {} || k == l);
	return test && test2 && test3;
};

movePossible := procedure(source, target) {
	return target == {} || (min(source) < min(target));
};

oneStep := procedure(pS, r) {
	return {p + [z]: p in pS, [y, z] in r | p[#p] == y};
};

eliminateCycles := procedure(pS) {
	return {p : p in pS | ( ! (cyclic(p)) )};
};

cyclic := procedure(p) {
	return #{x: x in p} < #p;
};

reachable := procedure(x, y, r) {
	pS := {[x]};
	while (true) {
		old_PS := pS;
		pS := pS + eliminateCycles(oneStep(pS, r));
		p := {p : p in pS | p[#p] == y};
		if (p != {}) {
			return arb(p);
		}
		if (old_PS == pS) {
			return;
		}
	}
};

all := {1, 2, 3};
p := {[l1, l2, l3]: l1 in pow(all), l2 in pow(all), l3 in pow(all) | partition(l1, l2, l3, all)};
r12 := {[[l1, l2, l3], [l1 - {x}, l2 + {x}, l3]]: [l1, l2, l3] in p, x in {min(l1)} | movePossible(l1, l2)};
r21 := {[[l1, l2, l3], [l1 + {x}, l2 - {x}, l3]]: [l1, l2, l3] in p, x in {min(l2)} | movePossible(l2, l1)};
r13 := {[[l1, l2, l3], [l1 - {x}, l2, l3 + {x}]]: [l1, l2, l3] in p, x in {min(l1)} | movePossible(l1, l3)};
r31 := {[[l1, l2, l3], [l1 + {x}, l2, l3 - {x}]]: [l1, l2, l3] in p, x in {min(l3)} | movePossible(l3, l1)};
r23 := {[[l1, l2, l3], [l1, l2 - {x}, l3 + {x}]]: [l1, l2, l3] in p, x in {min(l2)} | movePossible(l2, l3)};
r32 := {[[l1, l2, l3], [l1, l2 + {x}, l3 - {x}]]: [l1, l2, l3] in p, x in {min(l3)} | movePossible(l3, l2)};
r := r12 + r21 + r31 + r13 + r23 + r32;
start := [{1, 2, 3}, {}, {}];
goal := [{}, {}, {1, 2, 3}];
path := reachable(start, goal, r);
print("\nLoesung:");
for (i in [1 .. #path]) {
	t1 := lastChars(path[i][1], 20);
	t2 := lastChars(path[i][2], 20);
	t3 := lastChars(path[i][3], 20);
	print(t1, t2, t3);
}

