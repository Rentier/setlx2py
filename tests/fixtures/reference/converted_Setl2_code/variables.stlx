
allVars := procedure(expr) {
	operators := {"+", "-", "*", "/"};
	switch {
		case isString(expr) :
			return {expr};
		case expr[2] in operators :
			return allVars(expr[1]) + allVars(expr[3]);
		default :
			abort("Error in allVars(" + expr + ")");
	}
};

countVars := procedure(expr, x) {
	count := 0;
	operators := {"+", "-", "*", "/"};
	switch {
		case x == expr :
			count := count + 1;
		case isString(expr) :
			count := count;
		case expr[2] in operators :
			return countVars(expr[1], x) + countVars(expr[3], x);
		default :
			abort("Error in countVars(" + expr + ")");
	}
	return count;
};

singleVars := procedure(expr) {
	return {x : x in allVars(expr) | countVars(expr, x) == 1};
};

testVars := procedure(expr, x) {
	state.tokenList := scanExpr(expr);
	state.index := 1;
	expr := parseExpr();
	print("   allVars( ", prettyPrint(expr), ") = ", allVars(expr));
	print(" countVars( ", prettyPrint(expr), ", ", x, ") = ", countVars(expr, x));
	print("singleVars( ", prettyPrint(expr), ") = ", singleVars(expr));
	print("\n");
};

prettyPrint := procedure(expr) {
	switch {
		case isVariable(expr) :
			return expr;
		case isInteger(expr) :
			return str(expr);
		case isDouble(expr) :
			return str(expr);
		case #expr == 3 && expr[2] == "+" :
			return prettyPrint(expr[1]) + " + " + prettyPrint(expr[3]);
		case #expr == 3 && expr[2] == "-" :
			return prettyPrint(expr[1]) + " - " + prettyPrintParen(expr[3]);
		case #expr == 3 && expr[2] == "*" :
			return prettyPrintParen(expr[1]) + " * " + prettyPrintParen(expr[3]);
		case #expr == 3 && expr[2] == "/" :
			return prettyPrintParen(expr[1]) + " / " + prettyPrintParen(expr[3]);
		case #expr == 3 && expr[2] == "**" :
			return prettyPrintParen(expr[1]) + " ** " + prettyPrintParen(expr[3]);
		case #expr == 2 && expr[1] == "-" :
			return "- " + prettyPrintParen(expr[2]);
		case #expr == 2 && expr[1] == "+" :
			return prettyPrint(expr[2]);
		case #expr == 2 && expr[1] == "sin" :
			return "sin(" + prettyPrint(expr[2]) + ")";
		case #expr == 2 && expr[1] == "cos" :
			return "cos(" + prettyPrint(expr[2]) + ")";
		case #expr == 2 && expr[1] == "tan" :
			return "tan(" + prettyPrint(expr[2]) + ")";
		case #expr == 2 && expr[1] == "sqrt" :
			return "sqrt(" + prettyPrint(expr[2]) + ")";
		case #expr == 2 && expr[1] == "arcsin" :
			return "arcsin(" + prettyPrint(expr[2]) + ")";
		case #expr == 2 && expr[1] == "arccos" :
			return "arccos(" + prettyPrint(expr[2]) + ")";
		case #expr == 2 && expr[1] == "arctan" :
			return "arctan(" + prettyPrint(expr[2]) + ")";
		case #expr == 2 && expr[1] == "exp" :
			return "exp(" + prettyPrint(expr[2]) + ")";
		case #expr == 2 && expr[1] == "ln" :
			return "ln(" + prettyPrint(expr[2]) + ")";
		default :
			abort("Error in prettyPrint( " + str(expr) + " )");
	}
};

prettyPrintParen := procedure(expr) {
	functionNames := {"sin", "cos", "tan", "sqrt", "arcsin", "arccos", "arctan", "exp", "ln"};
	switch {
		case isVariable(expr) :
			return expr;
		case isInteger(expr) :
			return str(expr);
		case isDouble(expr) :
			return str(expr);
		case #expr == 2 && expr[1] in functionNames :
			return prettyPrint(expr);
		default :
			return "(" + prettyPrint(expr) + ")";
	}
};

isVariable := procedure(expr) {
	return isString((expr));
};

parseExpr := procedure() {
	product := parseProduct();
	result := parseExprRest(product);
	if (state.tokenList[state.index] == ")") {
		return result;
	}
	if (#state.tokenList + 1 != state.index) {
		print("state.tokenList = ", state.tokenList);
		print("state.index     = ", state.index);
		print("result     = ", result);
		abort("Parse Error");
	}
	return result;
};

parseExprRest := procedure(sum) {
	if (checkTokens("+")) {
		product := parseProduct();
		return parseExprRest([sum, "+", product]);
	}
	if (checkTokens("-")) {
		product := parseProduct();
		return parseExprRest([sum, "-", product]);
	}
	return sum;
};

parseProduct := procedure() {
	power := parsePower();
	return parseProductRest(power);
};

parseProductRest := procedure(product) {
	if (checkTokens("*")) {
		power := parsePower();
		return parseProductRest([product, "*", power]);
	}
	if (checkTokens("/")) {
		power := parsePower();
		return parseProductRest([product, "/", power]);
	}
	return product;
};

parsePower := procedure() {
	factor := parseFactor();
	if (checkTokens("**")) {
		power := parsePower();
		return [factor, "**", power];
	}
	return factor;
};

parseFactor := procedure() {
	if (checkTokens("(")) {
		expr := parseExpr();
		if (( ! (checkTokens(")")) )) {
			abort("Parse Error, ')' expected");
		}
		return expr;
	}
	if (checkTokens("exp")) {
		if (( ! (checkTokens("(")) )) {
			abort("Parse Error, '(' expected");
		}
		expr := parseExpr();
		if (( ! (checkTokens(")")) )) {
			abort("Parse Error, ')' expected");
		}
		return ["exp", expr];
	}
	if (checkTokens("ln")) {
		if (( ! (checkTokens("(")) )) {
			abort("Parse Error, '(' expected");
		}
		expr := parseExpr();
		if (( ! (checkTokens(")")) )) {
			abort("Parse Error, ')' expected");
		}
		return ["ln", expr];
	}
	if (checkTokens("sqrt")) {
		if (( ! (checkTokens("(")) )) {
			abort("Parse Error, '(' expected");
		}
		expr := parseExpr();
		if (( ! (checkTokens(")")) )) {
			abort("Parse Error, ')' expected");
		}
		return ["sqrt", expr];
	}
	if (checkTokens("sin")) {
		if (( ! (checkTokens("(")) )) {
			abort("Parse Error, '(' expected");
		}
		expr := parseExpr();
		if (( ! (checkTokens(")")) )) {
			abort("Parse Error, ')' expected");
		}
		return ["sin", expr];
	}
	if (checkTokens("cos")) {
		if (( ! (checkTokens("(")) )) {
			abort("Parse Error, '(' expected");
		}
		expr := parseExpr();
		if (( ! (checkTokens(")")) )) {
			abort("Parse Error, ')' expected");
		}
		return ["cos", expr];
	}
	if (checkTokens("tan")) {
		if (( ! (checkTokens("(")) )) {
			abort("Parse Error, '(' expected");
		}
		expr := parseExpr();
		if (( ! (checkTokens(")")) )) {
			abort("Parse Error, ')' expected");
		}
		return ["tan", expr];
	}
	if (checkTokens("arctan")) {
		if (( ! (checkTokens("(")) )) {
			abort("Parse Error, '(' expected");
		}
		expr := parseExpr();
		if (( ! (checkTokens(")")) )) {
			abort("Parse Error, ')' expected");
		}
		return ["arctan", expr];
	}
	if (isString(state.tokenList[state.index])) {
		result := state.tokenList[state.index];
		state.index := state.index + 1;
		return result;
	}
	if (isInteger(state.tokenList[state.index])) {
		result := state.tokenList[state.index];
		state.index := state.index + 1;
		return result;
	}
	abort("Parse Error in parseFactor,");
};

checkTokens := procedure(token) {
	if (state.index > #state.tokenList) {
		return false;
	}
	if (state.tokenList[state.index] == token) {
		state.index := state.index + 1;
		return true;
	}
	return false;
};

scanExpr := procedure(s) {
	letters := {};
	for (x in {46} + {48 .. 57} + {65 .. 90} + {97 .. 122}) {
		letters := letters + {char(x)};
	}
	switch {
		case #s > 1 && s[1..2] == "**" :
			return ["**"] + scanExpr(s[3..]);
		case s == "" :
			return [];
		case s[1] == "(" :
			return ["("] + scanExpr(s[2..]);
		case s[1] == ")" :
			return [")"] + scanExpr(s[2..]);
		case s[1] == "+" :
			return ["+"] + scanExpr(s[2..]);
		case s[1] == "-" :
			return ["-"] + scanExpr(s[2..]);
		case s[1] == "*" :
			return ["*"] + scanExpr(s[2..]);
		case s[1] == "/" :
			return ["/"] + scanExpr(s[2..]);
		case s[1] == " " :
			return scanExpr(s[2..]);
		case s[1] == "\t" :
			return scanExpr(s[2..]);
		case s[1] == "\n" :
			return scanExpr(s[2..]);
	}
	index := 1;
	word := "";
	if (s[index] notin letters) {
		abort("Error in scanExpr(" + s + ")");
	}
	while (s[index] in letters && index < #s) {
		index := index + 1;
	}
	if (onlyDigits(s[1 .. index - 1])) {
		token := ascii2int(s[1 .. index - 1]);
	} else {
		token := s[1 .. index - 1];
	}
	if (( ! (s[index] in letters) )) {
		return [token] + scanExpr(s[index..]);
	}
	if (index == #s) {
		if (onlyDigits(s[1..index])) {
			token := ascii2int(s[1..index]);
		} else {
			token := s[1..index];
		}
		return [token];
	}
	abort("Error in scanExpr: s = " + s);
};

onlyDigits := procedure(s) {
	return {s[i]: i in [1 .. #s]} <= {char(i): i in [abs("0") .. abs("9")]};
};

ascii2int := procedure(s) {
	return +/ [(abs(s[i]) - abs("0")) * 10 ** (#s - i): i in [1 .. #s]];
};

class state() {
    static {
        tokenList := [];
        index     := 0;
    }
}

testVars("(x + y) * (x + y) + z", "x");

