
both := procedure(l1, l2) {
	return {x: x in l1 | x in l2};
};

pythagoras := procedure(n) {
	return {[x, y, z]: x in {0 .. n - 1}, y in {0 .. n - 1}, z in {0 .. n - 1} | x * x + y * y == z * z};
};

compose := procedure(a1, a2) {
	return {[[x, z], d1 + d2]: [[x, y1], d1] in a1, [[y2, z], d2] in a2 | y1 == y2};
};

closure := procedure(a) {
	temp := a;
	while (true) {
		old_Temp := temp;
		temp := a + compose(a, temp);
		if (temp == old_Temp) {
			return temp;
		}
	}
};

toLists := procedure(m) {
	if (#m == 1) {
		return {[+/ m]};
	}
	r := {};
	oldM := m;
	while (#m > 0) {
		x := from(m);
		subLists := toLists(oldM - {x});
		while (#subLists > 0) {
			y := from(subLists);
			r := {[x] + y} + r;
		}
	}
	return r;
};

x := [1, 2, 3];
y := [3, 4, 5, 3];
print(both(x, y));
print(pythagoras(6));
a1 := {[["a", "b"], 1], [["a", "c"], 2]};
a2 := {[["b", "d"], 2], [["c", "e"], 3]};
a3 := {[["a", "b"], 1], [["b", "c"], 2], [["c", "d"], 10]};
print(compose(a1, a2));
print(closure(a3));
print(toLists({1, 2, 3}));

