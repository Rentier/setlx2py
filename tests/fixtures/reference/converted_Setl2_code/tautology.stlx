
tautology := procedure(f) {
	p := collectVars(f);
	a := {{[x, x in m]: x in p}: m in pow(p)};
	if ({eval(f, i): i in a} == {true}) {
		return true;
	} else {
		return arb({i : i in a | ( ! (eval(f, i)) )});
	}
};

collectVars := procedure(f) {
	switch {
		case f == 1 :
			return {};
		case f == 0 :
			return {};
		case isString(f) :
			return {f};
		case f[1] == "-" :
			return collectVars(f[2]);
		case f[2] == "*" :
			return collectVars(f[1]) + collectVars(f[3]);
		case f[2] == "+" :
			return collectVars(f[1]) + collectVars(f[3]);
		case f[2] == "->" :
			return collectVars(f[1]) + collectVars(f[3]);
		case f[2] == "<->" :
			return collectVars(f[1]) + collectVars(f[3]);
		default :
			print("malformed formula: ", f);
	}
};

eval := procedure(f, i) {
	switch {
		case f == 1 :
			return true;
		case f == 0 :
			return false;
		case isString(f) :
			return i[f];
		case f[1] == "-" :
			return ( ! (eval(f[2], i)) );
		case f[2] == "*" :
			return eval(f[1], i) && eval(f[3], i);
		case f[2] == "+" :
			return eval(f[1], i) || eval(f[3], i);
		case f[2] == "->" :
			return ( ! (eval(f[1], i)) ) || eval(f[3], i);
		case f[2] == "<->" :
			return eval(f[1], i) == eval(f[3], i);
		default :
			print("eval: Syntax-Fehler: ", f);
	}
};

prettyPrint := procedure(f) {
	switch {
		case f == 1 :
			return "1";
		case f == 0 :
			return "0";
		case isString(f) :
			return f;
		case f[1] == "-" :
			return "-" + prettyPrint(f[2]);
		case f[2] == "*" :
			return "(" + prettyPrint(f[1]) + " * " + prettyPrint(f[3]) + ")";
		case f[2] == "+" :
			return "(" + prettyPrint(f[1]) + " + " + prettyPrint(f[3]) + ")";
		case f[2] == "->" :
			return "(" + prettyPrint(f[1]) + " -> " + prettyPrint(f[3]) + ")";
		case f[2] == "<->" :
			return "(" + prettyPrint(f[1]) + " <-> " + prettyPrint(f[3]) + ")";
		default :
			abort("Error in prettyPrint: " + str(f));
	}
};

scanFormula := procedure(s) {
	letters := {};
	for (x in {48 .. 57} + {65 .. 90} + {97 .. 122}) {
		letters := letters + {char(x)};
	}
	switch {
		case s == "" :
			return [];
		case s[1] == "(" :
			return ["("] + scanFormula(s[2..]);
		case s[1] == ")" :
			return [")"] + scanFormula(s[2..]);
		case s[1] == "+" :
			return ["+"] + scanFormula(s[2..]);
		case s[1] == "*" :
			return ["*"] + scanFormula(s[2..]);
		case #s >= 2 && s[1..2] == "->" :
			return ["->"] + scanFormula(s[3..]);
		case #s >= 3 && s[1..3] == "<->" :
			return ["<->"] + scanFormula(s[4..]);
		case s[1] == "-" :
			return ["-"] + scanFormula(s[2..]);
		case s[1] == " " || s[1] == "    " :
			return scanFormula(s[2..]);
	}
	index := 1;
	word := "";
	if (s[index] notin letters) {
		abort("Error in scanFormula(" + s + ")");
	}
	while (s[index] in letters && index < #s) {
		index := index + 1;
	}
	if (( ! (s[index] in letters) )) {
		return [s[1..index - 1]] + scanFormula(s[index..]);
	}
	if (index == #s) {
		return [s];
	}
	print("Error in scanFormula: s = ", s);
};

parse_formula := procedure(l) {
	f := parse_parentheses(l);
	if (f != om) {
		return f;
	}
	f := parse_equivalence(l);
	if (f != om) {
		return f;
	}
	f := parse_implication(l);
	if (f != om) {
		return f;
	}
	f := parse_disjunction(l);
	if (f != om) {
		return f;
	}
	f := parse_conjunction(l);
	if (f != om) {
		return f;
	}
	f := parse_negation(l);
	if (f != om) {
		return f;
	}
	f := parse_atom(l);
	if (f != om) {
		return f;
	}
};

parse_parentheses := procedure(l) {
	if (l[1] == "(" && l[#l] == ")") {
		return parse_formula(l[2..#l - 1]);
	}
};

parse_equivalence := procedure(l) {
	for (i in [2 .. #l - 1]) {
		if (l[i] == "<->") {
			f1 := parse_formula(l[1..i - 1]);
			if (f1 != om) {
				f2 := parse_formula(l[i + 1..#l]);
				if (f2 != om) {
					return [f1, "<->", f2];
				}
			}
		}
	}
};

parse_implication := procedure(l) {
	for (i in [2 .. #l - 1]) {
		if (l[i] == "->") {
			f1 := parse_formula(l[1..i - 1]);
			if (f1 != om) {
				f2 := parse_formula(l[i + 1..#l]);
				if (f2 != om) {
					return [f1, "->", f2];
				}
			}
		}
	}
};

parse_disjunction := procedure(l) {
	for (i in [2 .. #l - 1]) {
		if (l[i] == "+") {
			f1 := parse_formula(l[1..i - 1]);
			if (f1 != om) {
				f2 := parse_formula(l[i + 1..#l]);
				if (f2 != om) {
					return [f1, "+", f2];
				}
			}
		}
	}
};

parse_conjunction := procedure(l) {
	for (i in [2 .. #l - 1]) {
		if (l[i] == "*") {
			f1 := parse_formula(l[1..i - 1]);
			if (f1 != om) {
				f2 := parse_formula(l[i + 1..#l]);
				if (f2 != om) {
					return [f1, "*", f2];
				}
			}
		}
	}
};

parse_negation := procedure(l) {
	if (l[1] == "-") {
		f := parse_formula(l[2..#l]);
		if (f != om) {
			return ["-", f];
		}
	}
};

parse_atom := procedure(l) {
	if (#l == 1) {
		if (l[1] == "1") {
			return 1;
		} else if (l[1] == "0") {
			return 0;
		} else if (isString(l[1])) {
			return l[1];
		}
	}
};

print("Bitte Formel eingeben");
s := get();
l := scanFormula(s);
f := parse_formula(l);
print(f);
checkResult := tautology(f);
if ((checkResult <==> true)) {
	print("Die Formel \"" + prettyPrint(f) + "\" ist eine Tautologie.");
} else {
	print("Die Formel \"" + prettyPrint(f) + "\" ist keine Tautologie.");
	print("Gegenbeispiel: ", checkResult);
}

