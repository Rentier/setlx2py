// 
// Some sorting algorithms in SetlX
//
// There is not built in support in SetlX (or SETL), so here are
// some different versions.
//
// Related:  http://www.hakank.org/setl/sort_utils.setl
//           http://www.hakank.org/setl/sort_utils.setl
//
// This SetlX program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//

//
// benchmark
//
bench := procedure(a, name, method) {
  print(name);
  print(method(a));
};

//
// Merge sort
// Inspired by
// http://en.wikipedia.org/wiki/Merge_sort
//
merge_sort := procedure(m) {
  if (#m <= 1) {
    return m;
  }

  left := [];
  right := [];
  result := [];

  middle := #m \ 2;
  for (x in m[1..middle]) {
    left += [x];
  }
  for (x in m[middle+1..]) {
    right += [x];
  }

  left := merge_sort(left);
  right := merge_sort(right);

  if (left[#left] > right[1]) {
    result := merge(left, right);
  } else {
    result := left + right;
  }

  return result;

};

merge := procedure(left,right) {
  result := [];
  while (#left > 0 && #right > 0) {
    if (left[1] <= right[1]) {
      result += [left[1]];
      left := left[2..#left];
    } else {
      result += [right[1]];
      right := right[2..#right];
    }
  }

  if (#left > 0) {
    result += left;
  } else {
    result += right;
  }

  return result;

};

// Merge sort  
// From http://www.settheory.com/Chapters/Chapter_5_procedures.html
// Recursive variant
merge_sort_rec := procedure(t) {

  if (#t < 2) { 
    return t;
  } else {
    return merge_rec(merge_sort_rec(t[1..#t \ 2]), merge_sort(t[#t \ 2 + 1..]));
  }

};

merge_rec := procedure(t1,t2) {
  if (t1 == []) {
    return t2;
  } else if (t2 == []) {
    return t1;
  } else if (t1[1] < t2[1]) {
    return [t1[1]] + merge(t1[2..],t2);
  } else { 
    return [t2[1]] + merge(t1, t2[2..]);
  }
};

//
// Merge sort
// iterative variant
// From http://www.settheory.com/Chapters/Chapter_5_procedures.html
//
merge_sort_it := procedure(t) { // recursive merge_sort procedure
  if (#t < 2) {
    return t;
  } else {
    return merge_it(merge_sort_it(t[1..#t \ 2]), merge_sort_it(t[#t \ 2 + 1..]));
  }

};

// iterative variant of merge procedure
merge_it := procedure(t1,t2) {
  t := [];                // merged tuple to be built up
  i1 := i2 := 1;          // indices of first components not yet moved
  while (i1 <= #t1 && i2 <= #t2) {
    if (t1[i1] < t2[i2]) {
      t += [t1[i1]];
      i1 +=1;
    } else {       
      t += [t2[i2]];
      i2 += 1;
    }
  }
  return t + t1[i1..] + t2[i2..];
};


//
// quicksort
//
qsort := procedure(a) {
  if (#a > 1) {
    pivot := a[#a \ 2 + 1];
    a := qsort([x : x in a | compare(x, pivot)  < 0]) +
               [x : x in a | compare(x, pivot) == 0]     +
         qsort([x : x in a | compare(x, pivot)  > 0]);
  }

  return a;
};

//
// insertion sort
//
insertion_sort := procedure(a) {
  for (i in [2..#a]) {
    v := a[i];
    j := i-1;
    while (j >= 1 && compare(a[j], v) > 0) {
      a[j+1] := a[j];
      j := j - 1;
    }
    a[j+1] := v; 
  }

  return a;
};

n := 10000;
r := [1..1000];
a := [rnd(r) : i in [1..n]];
print("unsorted:");
print(a);

bench(a, "qsort", qsort);
bench(a, "merge_sort", merge_sort);
bench(a, "merge_sort_rec", merge_sort_rec);
bench(a, "merge_sort_it", merge_sort_it);
bench(a, "insertion_sort", insertion_sort);

