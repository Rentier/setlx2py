//
// Project Euler problem 37 in SETL
//
// """
// The number 3797 has an interesting property. Being prime itself, it is possible to
// continuously remove digits from left to right, and remain prime at each stage:
// 3797, 797, 97, and 7. Similarly we can work from right to left: 3797, 379, 37, and 3.
//
// Find the sum of the only eleven primes that are both truncatable from left to right
// and right to left.
//
// NOTE: 2, 3, 5, and 7 are not considered to be truncatable primes.
//
// """
//
// This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//

class state() {
    static {
        prime_hash := {};
    }
}

is_prime := procedure(n) {

    pp := state.prime_hash[n];
    if (pp != om) {
        return pp;
    }

    if (n == 1) {
      return false;
    }

    if (n == 2 || n == 3) {
        return(true);
    }

    if (n % 2 == 0) {
        state.prime_hash[n] := false;
        return(false);
    }

    for (i in [3, 5..round(sqrt(n))+1]) {
        if (n % i == 0) {
            state.prime_hash[n] := false;
            return(false);
        }
    }

    state.prime_hash[n] := true;

    return true;
};

check2 := procedure(n) {

   ll := str(n);
   for (i in [1..#ll]) {
       tmp1 := int(+/[ll[j] : j in [i..#ll]]);
       if (!is_prime(tmp1)) {
           return(false);
       }
   }

   ll2 := reverse(ll);
   for (i in [1..#ll2]) {
       // note the reverse again.
       rev := reverse([ll2[j] : j in [i..#ll]]);
       tmp2 := int(+/rev);
       if (!is_prime(tmp2)) {
           return(false);
       }
   }

   return(true);

};

problem37 := procedure() {

    // 2, 3, 5, and 7 is not considered truncable primes
    // so we start on 9

    // init the prime hash
    state.prime_hash := {[1,false],[2,true],[3,true]};

    p := 7+2;
    sum := 0;
    c := 0;
    ps := [];
    while (c < 11) {
        if (is_prime(p)) {
            if (check2(p)) {
                c += 1;
                print("p:", p);
                sum += p;
                ps += [p];
            }
        }

        p += 2;

    }

    print(ps);
    print(sum);

};

problem37();

