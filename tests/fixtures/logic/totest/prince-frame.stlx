load("davis-putnam.stlx");
load("knf.stlx");

// Aufgabe: Der König führt den Prinzen in einen Raum mit 9 Türen. An
// jeder Tür hängt ein Schild. In einem Zimmer ist eine Prinzessin, jedes
// andere Zimmer ist leer oder es steckt ein Tiger drin. Der Prinz möchte
// die Prinzessin haben.

// Die Prozedur computeClauses berechnet eine Menge von Klauseln, die das Problem
// als aussagenlogische Formel beschreibt.  Die Variable 
//     P(i)    ist für i in { 1, ..., 9 }
// genau dann wahr, wenn die Prinzessin in dem i-ten Zimmer ist.  Die Variable
//     T(i)    ist für i in { 1, ..., 9 }
// genau dann wahr, wenn in dem i-ten Zimmer ein Tiger ist.  Die Variable
//     Z(i)    ist für i in { 1, ..., 9 }
// genau dann wahr, wenn die Aufschrift des i-ten Zimmers wahr ist.  Die Variable
//     w       
// ist genau dann wahr, wenn alle Aufschriften an leeren Zimmern wahr sind.
computeClauses := procedure() {
    // Die Prinzessin muss irgendwo sein
    clauses := { /* fill in details */ };
    // Es gibt nur eine Prinzessin.
    clauses += { /* construct an appropriate set here */ };
    // Der König sagt: In dem Zimmer, wo die Prinzessin ist, ist die Aufschrift
    // wahr. 
    clauses += { /* construct an appropriate set here */ };
    // In Zimmern wo Tiger drin sind, ist die Aufschrift falsch.  
    clauses += { /* construct an appropriate set here */ };
    // 1. Zimmer: Prinzessin ist in einem Zimmer mit ungerader Zimmernummer.
    //            In den Zimmern mit gerader Nummer ist kein Tiger.
    clauses += { /* construct an appropriate set here */ }; 
    // 2. Zimmer: Dieses Zimmer ist leer.
    clauses += { /* construct an appropriate set here */ };
    // 3. Zimmer: Die Aufschrift an Zimmer 5 ist wahr, die Aufschrift an Zimmer 7 ist falsch
    //            und in Zimmer 3 ist ein Tiger. 
    clauses += { /* construct an appropriate set here */ };
    // 4. Zimmer: Die Aufschrift an Zimmer 1 ist falsch, in Zimmer 8 ist kein Tiger,
    //            und die Aufschrift an Zimmer 9 ist richtig.
    clauses += { /* construct an appropriate set here */ };
    // 5. Zimmer: Wenn die Aufschrift an Zimmer 2 oder an Zimmer 4 wahr ist,
    //            dann ist kein Tiger im Zimmer 1.
    clauses += { /* construct an appropriate set here */ };
    // 6. Zimmer: Die Aufschrift an Zimmer 3 ist falsch, die Prinzessin ist im Zimmer 2 
    //            und im Zimmer 2 ist kein Tiger.
    clauses += { /* construct an appropriate set here */ };
    // 7. Zimmer: Die Prinzessin ist im Zimmer 1 und die Aufschrift an Zimmer 5 ist wahr.
    clauses += { /* construct an appropriate set here */ };
    // 8. Zimmer: In diesem Zimmer ist kein Tiger und Zimmer 9 ist leer.
    clauses += { /* construct an appropriate set here */ };
    // 9. Zimmer: Weder in diesem Zimmer noch in Zimmer 1 ist ein Tiger und die Aufschrift 
    //            an Zimmer 6 ist wahr.
    clauses += { /* construct an appropriate set here */ };
    // Entweder sind alle Aufschriften an leeren Zimmern wahr, oder alle Aufschriften an
    // leeren Zimmern sind falsch.
    for (i in [1 .. 9]) {
        // Hint: Use string interpolation to reference the loop variable i.
        // Example:
        //      parseKNF("P($i$) || T($i$)")
        clauses += { /* construct an appropriate set here */ };
    }
    return clauses;
};

// s is a set of propositional variables. The call atMostOne(s) creates
// a set of clauses.  This set expresses the fact that at most one of
// the variables in s is true.
atMostOne := procedure(s) {
    return { { !p, !q } : p in s, q in s | p != q };
};

// Parse a propositional formula and transform the result into a conjunctive
// normal form in set notation.
parseKNF := procedure(f) {
    return normalize(parse(f));
};

solve := procedure() {
    clauses := computeClauses();
    possible := {};  // Räume, in denen die Prinzessin sein könnte
    for (r in {1 .. 9}) {
        if (davisPutnam(clauses + {{ P(r) }}, {}) != {{}}) {
            possible += { r };
        }
    }
    if (#possible == 1) {
        r := arb(possible);
        print("Die Prinzessin ist im Zimmer Nr. $r$.");
    } else {
        print("Das Problem ist nicht eindeutig lösbar!");
    }   
};

solve();
