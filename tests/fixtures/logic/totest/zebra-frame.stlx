load("davis-putnam.stlx");

// Given a set s of propositional variables, the call atMostOne(s) creates
// a set of clauses.  This set expresses the fact that at most one of
// the variables in s is true.
atMostOne := procedure(s) {
    return { { !p, !q } : p in s, q in s | p != q };
};

// Given a function symbol f and an index i, this procedure generates the 
// propositional variable f(i).  For example, the expression
//
//   propVar("German", 2)
// 
// generates the propositional variable German(i).
propVar := procedure(f, i) {
    return makeTerm(f, [i]);
};

// We use the following propositional variable:
//
// Briton(i):  The Briton lives in house number i, where i is an element of the
//             set {1..5}.  The other nationalities are coded using the
//             propositional variables
//                      German(i), Swede(i), American(i), and Norwegian(i).
// Red(i):     The house with number i is red.
//             similarly: Green(i), White(i), Blue(i), Yellow(i).
// Dunhill(i): The inhabitant of house number i smokes Dunhill.
//             similarly: Camel(i), Marlboro(i), Winfield(i), Rothmanns(i).
// Dog(i):     The dog lives in house number i.
//             similarly: Parrot(i), Cat(i), Pig(i), Zebra(i).
// Whiskey(i): The inhabitant of house number i drinks Whiskey.
//             similarly: Coffee(i), Beer(i), Milk(i), Water(i).

// If this function is called as 
//      onePerHouse({"German", "Briton", "Swede", "American", "Norwegian"});    
// then it will generate clauses stating that
//      1.  There is a house where the German lives.
//      2.  There is a house where the Briton lives.
//          ...
//      3.  The Briton and the Swede do not live in the same house and
//          similarly for all other pairs of nationalities.
//      4.  Someone lives in the 1. house.
//      5.  Someone lives in the 2. house.
//          ...
onePerHouse := procedure(m) {
    // Use the functions somewhere, something, and atMostOneAt defined below
    // to implement this function.


};

// If this function is called as 
//       somewhere("Briton")
// it willl generate a clause stating that the Briton lives somewhere.
somewhere := procedure(x) {

};

// This procedure generates a clause that expresses that some variable from the set m 
// is true for the index i.  For example, the call
//
//    something({ "German", "Briton", "Swede", "Norwegian", "American" }, 2)
// 
// generates a clause expressing that somebody lives in the house with  number 2.
something := procedure(m, i) {

};

// The argument m is a set of function symbols. For example,
//
//   m = { "German", "Briton", "Swede", "Norwegian", "American" }.
//
// The argument i is an integer in the set {1..5}.  This variable represents
// the number of a house.  Continuing the example, atMostOneAt(m, i) generates 
// a set of clauses that is true iff at most one of the propositional variables
//
//    German(i), Briton(i), Swede(i), Norwegian(i), American(i)
//
// is true.
atMostOneAt := procedure(m, i) {

};

// Express that a is next to b.  Example call
//      nextTo("Marlboro", "Cat"); 
nextTo := procedure(a, b) {



};

// Express that a is left to b.  Example call
//      leftTo("Marlboro", "Cat"); 
leftTo := procedure(a, b) {


};

// Express that a and b are inthe same house.
//      sameHouse("Marlboro", "Cat"); 
sameHouse := procedure(a, b) {

};

allClauses := procedure() {
    // Every house has exactly one inhabitant.  This inhabitant has exactly one
    // nationality, one pet, smokes one brand of cigarettes, and has one type
    // of drink.  Furthermore, every house has exactly one color.





    // The Briton lives in the red house. 

    // The Swede has a dog.

    // The American drinks whiskey.

    // The inhabitant of the green house drinks coffee.

    // The person who owns a parrot smokes Camel.

    // The person in the yellow house smokes Dunhill.

    // The person smoking Winfield drinks beer.

    // The German smokes Rothmanns.

    // The green house is left to the white house.

    // The inhabitant of the third house drinks milk.

    // The Norwegian lives in the first house. 

    // The person smoking Marlboro lives next to the person who owns a cat.

    // The person with the pig lives next to the Dunhill smoker.

    // The Norwegian lives next to the blue house.

    // The Marlboro smoker lives next to the house where water is drunken.

};

solve := procedure() {
    clauses  := allClauses();
    solution := davisPutnam(clauses, {});
    printSolution(solution);
    print("checking uniqueness ...");
    for (i in {1 .. 5}) {
	    solution := davisPutnam(clauses + { { propVar("Zebra", i) } }, {});
        if (solution == {{}}) {
            print("The zebra cannot be in house number " + i + ".");
        } else {
            print("The zebra might be in house number " + i + ".");
        }
    }
};

printSolution := procedure(solution) {
    for (clause in solution) {
        match (arb(clause)) {
            case !p: // skip
            case  p: print(p);
        }
    }
};

solve();
