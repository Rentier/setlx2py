davisPutnam := procedure(clauses, literals) {
    clauses := saturate(clauses);
    if ({} in clauses) {
        return { {} };
    }
    if (forall (c in clauses | #c == 1)) {
        return clauses;
    }
    l := selectLiteral(clauses, literals);
    notL := negateLiteral(l);    
    r := davisPutnam(clauses + { {l} }, literals + { l, notL });
    if (r != { {} }) {
        return r;
    }     
    return davisPutnam(clauses + { {notL} }, literals + { l, notL });
};

saturate := procedure(s) {
    units := { k : k in s | #k == 1 };
    used  := {};
    while (units != {}) {
        unit  := arb(units);
        used  += { unit };
        l     := arb(unit);
        s     := reduce(s, l);
        units := { k : k in s | #k == 1 } - used;        
    }
    return s;
};

reduce := procedure(s, l) {
    notL := negateLiteral(l);
    return   { k - { notL } : k in s | notL in k } 
           + { k : k in s | !(notL in k) && !(l in k) } 
           + { {l} };
};


selectLiteral := procedure(s, forbidden) {
    return arb(+/ s - forbidden);
};

negateLiteral := procedure(l) {
    if (l[1] == "!") {
        return l[2..];
    } else {
        return "!" + l;
    }
};

// m := parse("{ {r,p,s}, {r,s}, {q,p,s}, {!p,!q}, {!p,s,!r}, {p,!q,r}, {!r,!s,q}, {p,q,r,s}, {r,!s,q}, {!r,s,!q}, {s,!r} }");
// print(davisPutnam(m,{}));
