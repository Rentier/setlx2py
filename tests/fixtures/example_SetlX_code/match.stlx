// this program demonstrates the match statement

exprString := "55 * 99 - 123 ** (14 - 2)";
exprTerm   := parse(exprString);

print(canonical(exprTerm));

match (exprTerm) {
    case a - b ** (c) :
        print("match: a = $a$, b = $b$, c = $c$");
    default :
        print("failed to match");
}

print();

exprString := "[1, 99, 7]";
exprTerm   := parse(exprString);

print(canonical(exprTerm));

match (exprTerm) {
    case [d, e, f] :
        print("match: d = $d$, e = $e$, f = $f$");
    default :
        print("failed to match");
}

print();

list    := [1, "foo", 7];

print(canonical(list));

match (list) {
    case [g, "foo", h] :
        print("match: g = $g$, h = $h$");
    default :
        print("failed to match");
}

print();

list    := [1, "foo", 7];

print(canonical(list));

match (list) {
    case [i, "bar", j] : // MUST NOT match
        print("match: i = $i$, j = $j$");
    default :
        print("failed to match");
}

print();

exprString := "sqrt(a**2 + b**2) == c";
exprTerm   := parse(exprString);

print(canonical(exprTerm));

match (exprTerm) {
    case sqrt(x + _ ** y) == _ :  // match the function call only if it is exactly sqrt
        print("match: sqrt: x = $x$, y = $y$");
    default :
        print("failed to match");
}

print();

exprString := "sqrt(a**2 + b**2)";
exprTerm   := parse(exprString);

print(canonical(exprTerm));

match (exprTerm) {
    case fnc(u + _ ** v): // MUST NOT match, because it matches only a call to `fnc'
        print("match: fnc: u = $u$, v = $v$");
    case ^call(fnc, [u + _ ** v]): // matches all function calls with matching arguments
        print("match: fnc = $fnc$, u = $u$, v = $v$");
    default :
        print("failed to match");
}

print();

exprString := "u";
exprTerm   := parse(exprString);

print(canonical(exprTerm));

match (exprTerm) {
    case ^variable(z) :
        print("match: z = $z$");
    default :
        print("failed to match");
}

print();

// it is also possible to use condition in match!

exprString := "1 + 2 * 3";
exprTerm   := parse(exprString);

print(canonical(exprTerm));

match (exprTerm) {
    case j + k * l | j == l : // MUST NOT match, because 1 != 3
        print("match (a): j = $j$, k = $k$, l = $l$");
    case j + k * l | j + k == l:
        print("match (b): j = $j$, k = $k$, l = $l$");
    default :
        print("failed to match");
}

print();

