// this program can be used to test the performance of the factorial implementation

beginRead := now();
n := read("Which factorial should be computed? ");
if (now() - beginRead < 100) { // input in less than 0.1s is from automatic test
    printStats := false; // hide stats to get same output every time
} else {
    printStats := true;
}

beginCompNative := now();
f := n!;
endCompNative := now();

if (n <= 100000) {
    beginCompSetlXLoop := now();
    fSL := 1;
    i   := 2;
    while (i <= n) {
        fSL *= i;
        i   += 1;
    }
    endCompSetlXLoop := now();
    if (fSL != f) {
        abort("SetlX loop factorial computation is wrong!");
    }

    beginCompSetlXSet := now();
    fSS := */ {1 .. n};
    endCompSetlXSet := now();

    if (fSS != f) {
        abort("SetlX set factorial computation is wrong!");
    }

    beginCompSetlXList := now();
    fSL2 := */ [1 .. n];
    endCompSetlXList := now();

    if (fSL2 != f) {
        abort("SetlX list factorial computation is wrong!");
    }
}

beginPrint := now();
print(n,"! := ", f);
endPrint := now();

if (printStats) {
    print();
    print("Computing the factorial of ", n, " took \t", (endCompNative  - beginCompNative  - 0.0)/1000, " seconds (using multithreaded native implementation).");
    if (beginCompSetlXLoop != om) {
        print("Computing the factorial of ", n, " took \t", (endCompSetlXLoop - beginCompSetlXLoop - 0.0)/1000, " seconds (using SetlX loop).");
        print("Computing the factorial of ", n, " took \t", (endCompSetlXSet  - beginCompSetlXSet  - 0.0)/1000, " seconds (using a SetlX set).");
        print("Computing the factorial of ", n, " took \t", (endCompSetlXList - beginCompSetlXList - 0.0)/1000, " seconds (using a SetlX list).");
    }
    print("Printing the factorial of  ", n, " took \t", (endPrint - beginPrint - 0.0)/1000, " seconds.");
}

