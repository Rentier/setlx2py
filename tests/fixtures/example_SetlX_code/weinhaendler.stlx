
reachable := procedure(x, y, r) {
	p := {[x]};
	while (true) {
		old_P := p;
		p := p + path_product(p, r);
		found := {p : p in p | p[#p] == y};
		if (found != {}) {
			return arb(found);
		}
		if (p == old_P) {
			return;
		}
	}
};

path_product := procedure(p, q) {
	return {add(p1, q1): p1 in p, q1 in q | p1[#p1] == q1[1] && not_cyclic(add(p1, q1))};
};

not_cyclic := procedure(p) {
	return #{x: x in p} == #p;
};

add := procedure(p, q) {
	return p + q[2..];
};

p := {[drei, fuenf]: drei in {0 .. 3}, fuenf in {0 .. 5}};
r35 := {[[drei, fuenf], [drei - x, fuenf + x]]: [drei, fuenf] in p, x in {1 .. drei} | (fuenf + x == 5) || (x == drei && fuenf + x < 5)};
r53 := {[[drei, fuenf], [drei + x, fuenf - x]]: [drei, fuenf] in p, x in {1 .. fuenf} | (drei + x == 3) || (x == fuenf && drei + x < 3)};
r3F := {[[drei, fuenf], [3, fuenf]]: [drei, fuenf] in p};
r5F := {[[drei, fuenf], [drei, 5]]: [drei, fuenf] in p};
r3L := {[[drei, fuenf], [0, fuenf]]: [drei, fuenf] in p};
r5L := {[[drei, fuenf], [drei, 0]]: [drei, fuenf] in p};
r := r35 + r53 + r3F + r5F + r3L + r5L;
start := [0, 0];
goal := [0, 4];
path := reachable(start, goal, r);
print("Path:");
print(path);
print("\n");

