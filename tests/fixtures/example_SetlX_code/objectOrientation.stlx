// this program demonstrates some object orientation features of setlX

// define class
class c(number) {
    this.number := number;

    static {
        // overload '+' operator
        sum := other |-> number + other.number;
    }
}

// create two objects
a := c(5);
b := c(15);

// do some work with objects
print("a + b == $a + b$");

print();
// also overload '!' operator in object `a'
a.factorial := procedure() { if (cache == om) { print("uncached factorial"); this.cache := (number ** 2)!; } return cache;};

print("a! == $a!$");
print("a! == $a!$");

print();
// finally overload the power operator (**) with something unusual for all objects of c
c.power := procedure(rw other) { [other.number, this.number] := [number, other.number]; return "swapped";};

print("a.number == $a.number$");
print("b.number == $b.number$");
print("a ** b == $a ** b$");
print("a.number == $a.number$");
print("b.number == $b.number$");

