//
// Euler problem 24
// """
// A permutation is an ordered arrangement of objects. For example, 3124 is one
// possible permutation of the digits 1, 2, 3 and 4. If all of the permutations are
// listed numerically or alphabetically, we call it lexicographic order. The
// lexicographic permutations of 0, 1 and 2 are:
//
//     012   021   102   120   201   210
//
// What is the millionth lexicographic permutation of the digits
// 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?
// """
//
// This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com).
// See also my SETL page: http://www.hakank.org/setl/


problem24 := procedure() {
  print("Problem 24:");

  l1 := [0..9];
  c := 1;
  while (c < 1000000) {
    l1 := next_permutation(l1);
    c += 1;
  }

  print(l1);

};

problem24b := procedure() {
  print("Problem 24b:");
  perms := [] + permutations([0..9]); // [] + ... converts to tuple
  i := 1;
  pp := 0;
  for (p in perms) {
     if (i == 1000000) {
       pp := p;
       break;
     }
     i += 1;
  }
  print(pp);

};

problem24c := procedure() {
  print("Problem 24c:");
  perms := [] + permutations([0..9]);
  print(perms[1000000]);
};


next_permutation := procedure(p) {
    n := #p;
    k := n - 1;
    while (p[k] > p[k+1]) {
        k := k - 1;
        if (k == 0) {
           return om;
        }
    }
    if (k == 0) {
        return om;
    } else {
         j := n;
         while (p[k] > p[j]) { j := j - 1; }
         [p[k],p[j]] := [p[j], p[k]];
         r := n;
         s := k + 1;
         while (r > s) {
              [p[r],p[s]] := [p[s],p[r]];
              r := r - 1;
              s := s + 1;
         }
    }
    return p;

};

problem24();
problem24b();
problem24c();

