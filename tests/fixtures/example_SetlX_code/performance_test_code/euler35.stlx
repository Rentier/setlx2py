//
// Project Euler problem 35 in SETL
//
// Problem 35
// """
// The number, 197, is called a circular prime because all rotations
// of the digits: 197, 971, and 719, are themselves prime.
//
// There are thirteen such primes below 100:
// 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.
//
// How many circular primes are there below one million?
// """
//
// This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//

problem35 := procedure() {
   print("Problem 35: ");

   num_circular_primes := 0;
   primes := prime_sieve(1000000);
   // primes := gen_primes(1000000);
   for (n in primes) {
     if (is_circular_prime(n)) {
        num_circular_primes += 1;
     }
   }

   print(num_circular_primes);

};

problem35b := procedure() {
   print("Problem 35b: ");

   num_circular_primes := 0;
   //primes := prime_sieve(1000000);
   primes := gen_primes(1000000);
   for (n in primes) {
     if (is_circular_prime(n)) {
        num_circular_primes += 1;
     }
   }

   print(num_circular_primes);

};

problem35c := procedure() {
   print("Problem 35c: ");

   num_circular_primes := 0;
   for (n in [2..1000000]) {
     if (!is_prime(n)) {
       continue;
     }
     if (is_circular_prime(n)) {
        num_circular_primes += 1;
     }
   }

   print(num_circular_primes);

};


//
// check is a number (a prime) is a circular prime
//
is_circular_prime := procedure(p) {
   s := str(p);
   size := #s;
   for (i in [2..#s]) {
      ss := s[i..size] + s[1..i-1];
      v:= int(ss);
      if (!is_prime(v)) {
        return false;
      }
   }

   return true;

};

//
// Prime sieve
prime_sieve := procedure(n) {

    primes := [1..n];
    res := {};
    for (i in [2 .. n \ 2]) {
        // print("i: ", i);
        if (primes[i] == 0) {
            continue;
        }
        j := i;
        while (i * j <= n) {
           primes[i * j] := 0;
           j += 1;
        }
    }

    res := {i : i in [2..n] | primes[i] > 0};
    return res;

};

gen_primes := procedure(n) {
  primes := {2};
  p := 3;
  while (p <= n) {
    if (is_prime(p)) {
       primes += [p];
    }
    p += 2;
  }

  return primes;
};


is_prime := procedure(n) {

    if (n == 2 || n == 3) {
        return(true);
    }
    if (n % 2 == 0) {
        return(false);
    }

    if (exists (i in [3,5..round(sqrt(n))+1] | n % i == 0)) {
       return(false);
    }

    return(true);

};

problem35();
problem35b();
problem35c();

