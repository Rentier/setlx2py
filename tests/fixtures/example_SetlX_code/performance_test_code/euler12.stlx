// 
// Project Euler problem 12 in SETL
//
// Problem 12
// """
// The sequence of triangle numbers is generated by adding the natural numbers. 
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
// The first ten terms would be:
//
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
//
//      1: 1
//      3: 1,3
//      6: 1,2,3,6
//     10: 1,2,5,10
//     15: 1,3,5,15
//     21: 1,3,7,21
//     28: 1,2,4,7,14,28
//
// We can see that the 7th triangle number, 28, is the first triangle number 
// to have over five divisors.
//
// Which is the first triangle number to have over five-hundred divisors?")
// """
//
// This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//

problem12 := procedure() {
    print("Problem 12: ");
    lenx := 0;
    i := 0;
    tnum := 0;
    while (lenx <= 500) {
        i += 1;
        tnum += i;
        lenx := num_divisors(tnum);
    }

    print(tnum);

};

//
// number of divisors
//-
// multiply the (exponents and add 1
//
// See http://en.wikipedia.org/wiki/Divisor_function
//
num_divisors := procedure(n) {
   return */[ e+1 : [p,e] in collect(prime_factors(n))];
};


//
// collect
//
// Return a map with the number of occurrences of each number
// in the tuple a.
//
collect := procedure(a) {

  d := { i : i in a};
  c := { [i, #[j : j in [1..#a] | a[j] == i ]] :  i in d}; 

  return c; 
};

even := procedure(n) {
  return n % 2 == 0;
};

prime_factors := procedure(n) {
    facts := [];
    while (even(n)) { facts += [2]; n := n / 2; }
    while (exists (k in [3,5..round(sqrt(n))] | n % k == 0)) {
       facts += [k]; 
       n := n \ k;
    }
   facts += [n];

   return facts;

};


problem12();


