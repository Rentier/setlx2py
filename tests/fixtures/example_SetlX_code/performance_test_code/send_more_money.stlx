//
// SEND + MORE = MONEY problem in SetlX
//
// This SetlX program was written by Hakan Kjellerstrand (hakank@bonetmail.com).
// See also my SETL page: http://www.hakank.org/setl/ .
//

// Solution should be:
// [[9 5 6 7 1 0 8 2]]

test := procedure(s, name) {
  print(name);
  print(s());
};

send_more_money1 := procedure() {
  ss := {0..9};

  smm := [[s,e,n,d,m,o,r,y] :
          // ensure that all numbers are different
          s in ss ,
          e in ss - {s} ,
          n in ss - {s,e} ,
          d in ss - {s,e,n} ,
          m in ss - {s,e,n,d} ,
          o in ss - {s,e,n,d,m} ,
          r in ss - {s,e,n,d,m,o} ,
          y in ss - {s,e,n,d,m,o,r} |
          s > 0 && m > 0 &&
          (s * 1000 + e * 100 + n * 10 + d) +
          (m * 1000 + o * 100 + r * 10 + e) ==
          (m * 10000 + o * 1000 + n * 100 + e * 10 + y )];

  return smm;

};

// With some code optimization it's faster.
// The optimization is to move the constraints that
// s > 0 and m > 0 into the set creation
send_more_money1b := procedure() {
  ss := {0..9};

  smm := [[s,e,n,d,m,o,r,y] :
          // ensure that all numbers are different
          s in ss - {0},
          e in ss - {s} ,
          n in ss - {s,e} ,
          d in ss - {s,e,n} ,
          m in ss - {s,e,n,d, 0} ,
          o in ss - {s,e,n,d,m} ,
          r in ss - {s,e,n,d,m,o} ,
          y in ss - {s,e,n,d,m,o,r} |
          // s > 0 && m > 0 &&
          (s * 1000 + e * 100 + n * 10 + d) +
          (m * 1000 + o * 100 + r * 10 + e) ==
          (m * 10000 + o * 1000 + n * 100 + e * 10 + y )];

  return smm;

};

// Tini bit faster than send_more_money1b.
// Using the same idea as in send_more_money1b but
// use the set {1..9} for s and m instead of
// removing {0} from {0..9}.
send_more_money1c := procedure() {
  ss := {0..9};
  ss2 := {1..9};

  smm := [[s,e,n,d,m,o,r,y] :
          // ensure that all numbers are different
          s in ss2,
          e in ss - {s} ,
          n in ss - {s,e} ,
          d in ss - {s,e,n} ,
          m in ss2 - {s,e,n,d} ,
          o in ss - {s,e,n,d,m} ,
          r in ss - {s,e,n,d,m,o} ,
          y in ss - {s,e,n,d,m,o,r} |
          // s > 0 && m > 0 &&
          (s * 1000 + e * 100 + n * 10 + d) +
          (m * 1000 + o * 100 + r * 10 + e) ==
          (m * 10000 + o * 1000 + n * 100 + e * 10 + y )];

  return smm;

};

send_more_money2 := procedure() {
  perm := permutations([0..9]);
  print("It's ", #perm, " permutations");
  smm2 := [[s,e,n,d,m,o,r,y,a,b] : [s,e,n,d,m,o,r,y,a,b] in perm |
           a > b &&
           s > 0 && m > 0 &&
           (s * 1000 + e * 100 + n * 10 + d) +
           (m * 1000 + o * 100 + r * 10 + e) ==
           (m * 10000 + o * 1000 + n * 100 + e * 10 + y )];
  return smm2;

};

send_more_money3 := procedure() {
  ss := {0..9};
  smm := [[s,e,n,d,m,o,r,y] :
          s in ss ,
          e in ss,
          n in ss,
          d in ss,
          m in ss,
          o in ss,
          r in ss,
          y in ss |
          all_different([s,e,n,d,m,o,r,y]) &&
          s > 0 && m > 0 &&
          (s * 1000 + e * 100 + n * 10 + d) +
          (m * 1000 + o * 100 + r * 10 + e) ==
          (m * 10000 + o * 1000 + n * 100 + e * 10 + y )
          ];
  return smm;
};

// another variant, using nextPermutation
// better than send_more_money3 but it also
// slow
send_more_money4 := procedure() {
  p := [0..9];
  sols := [];

  while (p != om) {
    [s,e,n,d,m,o,r,y,a,b] := p;
    if (
        s > 0 && m > 0 &&
        (s * 1000 + e * 100 + n * 10 + d) +
        (m * 1000 + o * 100 + r * 10 + e) ==
        (m * 10000 + o * 1000 + n * 100 + e * 10 + y ) &&
        a < b
        )
      {
        sols +=  [s,e,n,d,m,o,r,y];
      }
    p:=nextPermutation(p);
  }

  return sols;
};

//
// all elements in x are different
//
all_different := procedure(x) {
  // print("all_different check:", x);
  return #x == #{i : i in x};
};

test(send_more_money1, "send_more_money1");
test(send_more_money1b, "send_more_money1b");
test(send_more_money1c, "send_more_money1c");
test(send_more_money2, "send_more_money2");
test(send_more_money3, "send_more_money3");
test(send_more_money4, "send_more_money4");

