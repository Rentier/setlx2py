//
// Ackermann function in SetlX
//
// From Rosetta code:
// http://rosettacode.org/wiki/Ackermann_function
// """
// The Ackermann function is a classic recursive example in computer science. 
// It is a function that grows very quickly (in its value and in the size of 
// its call tree). It is defined as follows:
//
//     A(m, n) = n+1 if m = 0
//               A(m-1, 1) if m > 0 and n = 0
//               A(m-1, A(m, n-1)) if m > 0 and n > 0
//
// Its arguments are never negative and it always terminates. Write a function 
// which returns the value of A(m,n). Arbitrary precision is preferred (since 
// the function grows so quickly), but not required. 
// """
//
// This SetlX program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SetlX page: http://www.hakank.org/setl/
//

class cache() {
    static {
        buffer := {};
        nCalls := 0;
    }
}

a := procedure(m, n) {
  match([m,n]) {
  case [0,_]: return n+1;
  case [m2,0]: return a(m2-1, 1);
  default: return a(m-1, a(m, n-1));
  }

};

a2 := procedure(m, n) {
  c := cache.buffer[[m,n]];
  if (c != om) {
    cache.nCalls += 1;
    return c;
  }

  res := 0;
  match([m,n]) {
  case [0,_]: res := n+1;
  case [_,0]: res := a2(m-1, 1);
  default   : res := a2(m-1, a2(m, n-1));
  }
  cache.buffer[[m,n]] := res;

  return res;
};


// for(i in [0..3], j in [0..3]) {
//   print("a($i$,$j$): $a(i,j)$");
// }

// cache.buffer := {};
// print("\nusing cache:");
// for(i in [0..4], j in [0..4]) {
//   print("a2($i$,$j$): $a2(i,j)$");
// }

cache.buffer := {};
cache.nCalls := 0;
print("(3,13):$a2(3,13)$");
print("\tcache_calls: $cache.nCalls$");
cache.buffer := {};
cache.nCalls := 0;
print("(4,1):$a2(4,1)$");
print("\tcache_calls: $cache.nCalls$");

// Stack overflow...
// cache.buffer := {};
// cache.nCalls := 0;
// print("(4,2):$a2(4,2)$");
// print("\tcache_calls: $cache.nCalls$");
