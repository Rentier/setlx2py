// this program implements a tester for tautologies using the match statement
getFormular := procedure() {
    print("Please enter a formula to be checked if it is tautology");
    try {
        return parse(get());
    } catch (error) {
        print();
        print("That did not work out!");
        print("Try again, but don't make this error again:\n$error$");
        print();
        return getFormular();
    }
};

collectVars := procedure(term) {
    match (term) {
        case ^variable(a) :
            return {a};
        case a <==> b, a => b, a && b, a || b :
            return collectVars(a) + collectVars(b);
        case ! a :
            return collectVars(a);
        default :
            abort("Input is not a purely logical formula!");
    }
};

formula := getFormular();

vars := collectVars(formula);
if (#vars < 1) {
    abort("No variables could be found!");
}

print("Included Variables are: " + vars);

for (trueVars in pow(vars)) {
    for (variable in trueVars) {
        execute(variable + " := true;");
    }
    for (variable in (vars - trueVars)) {
        execute(variable + " := false;");
    }
    if (evalTerm(formula) <==> false) {
        print("Formula is not a tautology.");
        example := "Counter-Example: ";
        for (variable in trueVars) {
            example += variable + " := true; ";
        }
        for (variable in (vars - trueVars)) {
            example += variable + " := false; ";
        }
        print(example);
        exit;
    }
}

print("Formula is a tautology.");

