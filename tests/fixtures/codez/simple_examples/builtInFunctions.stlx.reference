The circumference of a circle with radius 10 is: 62.83185307179586.
100 is approximately 100.0.

variables in outer scope: ^scope({["circumference", r |-> 2 * mathConst("pi") * r], ["getScope", ^preDefinedProcedure("getScope")], ["log", ^preDefinedProcedure("log")], ["mathConst", ^preDefinedProcedure("mathConst")], ["params", []], ["print", ^preDefinedProcedure("print")], ["resetRandom", ^preDefinedProcedure("resetRandom")]})
variables in outer scope: ^scope({["circumference", r |-> 2 * mathConst("pi") * r], ["getScope", ^preDefinedProcedure("getScope")], ["log", ^preDefinedProcedure("log")], ["mathConst", ^preDefinedProcedure("mathConst")], ["params", []], ["print", ^preDefinedProcedure("print")], ["printInnerScope", procedure() { secretVariable := 42; print("variables in inner scope: ", getScope()); }], ["resetRandom", ^preDefinedProcedure("resetRandom")]})
variables in inner scope: ^scope({["circumference", r |-> 2 * mathConst("pi") * r], ["getScope", ^preDefinedProcedure("getScope")], ["log", ^preDefinedProcedure("log")], ["mathConst", ^preDefinedProcedure("mathConst")], ["print", ^preDefinedProcedure("print")], ["printInnerScope", procedure() { secretVariable := 42; print("variables in inner scope: ", getScope()); }], ["resetRandom", ^preDefinedProcedure("resetRandom")], ["secretVariable", 42]})
variables in outer scope: ^scope({["circumference", r |-> 2 * mathConst("pi") * r], ["getScope", ^preDefinedProcedure("getScope")], ["log", ^preDefinedProcedure("log")], ["mathConst", ^preDefinedProcedure("mathConst")], ["params", []], ["print", ^preDefinedProcedure("print")], ["printInnerScope", procedure() { secretVariable := 42; print("variables in inner scope: ", getScope()); }], ["resetRandom", ^preDefinedProcedure("resetRandom")]})

Arrr("said", "the", "pirate")
Arrr("said", "the", "pirate")

46656 == 46656

maximum A (for N = 5,      P <= 5%) is 2.218400000000257.
minimum N (for A = 1.75,   P <= 7%) is 5.
Erlang B  (for A = 0.2*48, N = 20 ) is 0.0012316778169764295.
Erlang C  (for A = 0.2*48, N = 20 ) is 0.002365921291627033.

direct:    string   : "99"
converted: int      : 99
direct:    string   : "text"
converted: string   : "text"
direct:    string   : "text with number 5"
converted: string   : "text with number 5"
direct:    string   : "5.99"
converted: double   : 5.99
direct:    int      : 6
converted: int      : 6
direct:    double   : 99.999
converted: int      : 99
direct:    ??       : 'om'
converted: string   : "om"
direct:    ??       : 'procedure(value) { /* predefined procedure `abs' */ }'
converted: string   : "procedure(value) { /* predefined procedure `abs' */ }"
direct:    rational : 1/3
converted: int      : 0
direct:    string   : "99/100"
converted: rational : 99/100

["tails", "tails", "heads", "tails", "tails", "heads", "tails", "heads", "tails", "tails", "heads", "heads", "heads", "tails", "tails", "tails", "tails", "heads", "tails", "heads", "heads", "heads", "heads", "heads", "heads", "tails", "heads", "heads", "tails", "heads", "tails", "tails", "heads", "heads", "tails", "heads", "heads", "heads", "tails", "tails", "tails", "tails", "heads", "tails", "tails", "tails", "tails", "tails", "tails", "heads", "tails", "heads", "tails", "tails", "tails", "tails", "heads", "tails", "heads", "heads", "tails", "heads", "tails", "tails", "tails", "heads", "heads", "heads", "heads", "heads", "heads", "tails", "heads", "tails", "heads", "tails", "heads", "tails", "tails", "tails", "tails", "tails", "tails", "tails", "tails", "heads", "heads", "heads", "heads", "heads", "tails", "heads", "heads", "heads", "tails", "heads", "tails", "tails", "tails", "tails"]
Random number   between 0 and 999                : 389
Random fraction between 0 and 999, 42     choices: 30969/41
Random fraction between 0 and 1/2, 10     choices: 7/18
Random fraction between 0 and 5/4, 10**10 choices: 1992737765/1818181818
Chance of SetlX being executed in space: 0.6185077636570268
Distribution of randomness in setlX: {[0, 14300], [1/27, 14218], [2/27, 14335], [1/9, 14359], [4/27, 14296], [5/27, 14257], [2/9, 14235]}

When this was written, 15432 days had gone by since 1970-01-01.
Lets wait 500ms to commemorate this occasion.
OK, that's enough.

This is a 21_test_12
This is a $test$
This is a 21_test_12
This is a $test$
This is a 21_test_12This is a 21_test_12

{throwACoin, print} = {^lambdaDefinition([], ^call("rnd", [{^stringConstructor(["heads"], []), ^stringConstructor(["tails"], [])}])), ^preDefinedProcedure("print")}
a + 10 * b % 4 = ^sum(^variable("a"), ^modulo(^product(10, ^variable("b")), 4))
"print(parseStatements(\"print(\\"that is crazy!\\");\"));" = ^block([^call("print", [^call("parseStatements", [^stringConstructor(["print(\"that is crazy!\");"], [])])])])

6
foo
198
0.8414709848078965

Is 10123124191203 prime? false.
Could 10123124191203 be prime? false.
What is next prime after 10123124191203? 10123124191211.

All permutations of [1, 2, 2, 3] are {[1, 2, 2, 3], [1, 2, 3, 2], [1, 3, 2, 2], [2, 1, 2, 3], [2, 1, 3, 2], [2, 2, 1, 3], [2, 2, 3, 1], [2, 3, 1, 2], [2, 3, 2, 1], [3, 1, 2, 2], [3, 2, 1, 2], [3, 2, 2, 1]}.
Next permutation after [3, 1, 2, 2] is [3, 2, 1, 2].
sorted [31, 1, 2, 7, 99] is [1, 2, 7, 31, 99].
sorted `asdaf22341ad1' is `112234aaaddfs'.
shuffled [1 .. 5] is [2, 4, 3, 5, 1].
shuffled `this is a test' is `h itts ast ies'.

[1, 2, 3, 4, 5, 6, 7, 8, 9, 10] <-> [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
[[1, 2], [1, 3], [1, 4], [2, 2], [2, 3], [2, 4], [3, 2], [3, 3], [3, 4]] <-> [[3, 4], [3, 3], [3, 2], [2, 4], [2, 3], [2, 2], [1, 4], [1, 3], [1, 2]]
SetlX <-> XlteS

["from", "hell", "", "I", "come"]
from;hell;;I;come
[["foo", "bar"], ["ding", "dong"]]
from hell i come
FROM HELL I COME
false
true
this is a test

[["simpleClosure.stlx", "simpleClosure.stlx.reference"], []]

Assertion failed: "assert function works"
