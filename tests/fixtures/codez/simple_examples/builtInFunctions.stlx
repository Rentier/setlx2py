// this program demonstrates some of the new and possibly interesting built-in functions

resetRandom();
/*******************************************************************************
  mathConst(name_of_constant)   // get the value of a mathematical constant (currently only pi and e)
*/


circumference := [r] |-> 2 * mathConst("pi") * r;
print("The circumference of a circle with radius 10 is: " + circumference(10) + ".");
print("100 is approximately " + log(mathConst("e") ** 100) + ".");
print();

/*******************************************************************************
  getScope()                    // get a term representing all variables set in current scope
*/

print("variables in outer scope: ", getScope());
printInnerScope := procedure() {
    secretVariable := 42;
    print("variables in inner scope: ", getScope());
};
print("variables in outer scope: ", getScope());
printInnerScope();
print("variables in outer scope: ", getScope());
print();

/*******************************************************************************
  makeTerm(fnc, body)           // create a term with the form: fnc(body)
  fct(term)                     // get functional char of a term
  args(term)                    // get arguments of term
  canonical(term)               // returns a string of a term in its true form
*/

t := makeTerm("Arrr",["said","the","pirate"]);
a := str(args(t));
print(canonical(t));
print(fct(t), "(", a[2 .. #a-1], ")");
print();

/*******************************************************************************
  eval(expr)                    // evaluate a string of a SetlX expression
  execute(stmnts)               // execute a string of SetlX statements
*/

execute("x := y := 6;");
print(eval("x ** y"), " == ", x ** y);
print();

/*******************************************************************************
  load(path)                    // loads SetlX source code file and executes it
*/

load("../erlang.stlx"); // will fail if relative path is wrong...
print();

/*******************************************************************************
  int(stringOrNumber)           // convert string or number into an integer, returns om on failure
  rational(stringOrNumber)      // convert string or number into a rational, returns om on failure
  double(stringOrNumber)        // convert string or number into a double, returns om on failure
  str(value)                    // converts any value into a string, can not fail
*/

getIntRealOrStringFromInput := procedure(input) {
    testFunctions := [int, rational, double, str];
    for (f in testFunctions) {
        result := f(input);
        if (result != om) {
            return result;
        }
    }
    // this should not be reached, because anything can be converted into a string...
    abort("Input can not be converted to integer, double or string!");
};

valueWithType := procedure(value) {
    switch {
        case isInteger(value)  : return "int      : $value$";
        case isRational(value) : return "rational : $value$";
        case isDouble(value)   : return "double   : $value$";
        case isString(value)   : return "string   : \"$value$\"";
        default                : return "??       : '$value$'";
    }
};

userinput := ["99","text","text with number 5", "5.99", 6, 99.999, om, abs, 1/3, "99/100"];
for (i in userinput) {
    print("direct:    ", valueWithType(i));
    print("converted: ", valueWithType(getIntRealOrStringFromInput(i)));
}
print();

/*******************************************************************************
   rnd(numberOrCollectionValue [, numberOfChoices]) :
                                // a) If argument is an integer, returns a random number
                                //    between 0 and the argument (inclusive).
                                // b) If the argument is a rational number,
                                //    the `numberOfChoices' MUST be used and
                                //    a random number between 0 and the argument
                                //    (inclusive) will be returned. The number of
                                //    possible values in this range will equal
                                //    `numberOfChoices' which MUST be an integer >= 2.
                                // c) If the argument is a collectionValue,
                                //    a randomly selected member will be returned.

  random([real])                // Get random Real between 0.0 and argument (inclusive).
                                // If no argument is used, 1.0 is implied.
                                
  collect(list)                 // Collects multiple occurences of the same value in
                                // `list' into a map of [value, nOccurences].
*/

// note: these test will only be the same when interpreter is started with --predictableRandom

throwACoin := [] |-> rnd({"heads", "tails"});
l := [];
for (i in [1 .. 100]) {
    l += [throwACoin()];
}
print(l);
print("Random number   between 0 and 999                : $rnd(999)$");
print("Random fraction between 0 and 999, 42     choices: $rnd(999, 42)$");
print("Random fraction between 0 and 1/2, 10     choices: $rnd(1/2, 10)$");
print("Random fraction between 0 and 5/4, 10**10 choices: $rnd(5/4, 10**10)$");
print("Chance of SetlX being executed in space: $random()$");
print("Distribution of randomness in setlX: $collect([rnd(2/9,7): x in [1..100000]])$");
print();

/*******************************************************************************
  now()                         // get current time since epoch in ms
  sleep(time_in_ms)             // pause execution for a number of milliseconds
*/

daysSinceEpoch := procedure(ms) {
    aDayInMs := 1000 * 60 ** 2 * 24;
    return ms \ aDayInMs; // integer division
};

// print(daysSinceEpoch(now()) + " days have gone by since 1970-01-01.");
// now make it testable...
print("When this was written, " + daysSinceEpoch(1333372502020) + " days had gone by since 1970-01-01.");
print("Lets wait 500ms to commemorate this occasion.");
sleep(500);
print("OK, that's enough.");
print();

/*******************************************************************************
  printErr(value, ...)          // same as print, but prints into stderr
  nPrint(value, ...)            // same as print, but does not add a new line
  nPrintErr(value, ...)         // same as nPrint, but prints into stderr
*/

test := "21_test_12";
print    ("This is a $test$");
print    ('This is a $test$');
printErr ("This is a $test$");
printErr ('This is a $test$');
nPrint   ("This is a $test$");
nPrintErr("This is a $test$");
print();
print();

/*******************************************************************************
  getTerm(value)                // convert a value into a term
  parse(expr)                   // parse string of a SetlX expression into a term
  parseStatements(stmnts)       // parse string of SetlX statements into a term
*/

print("{throwACoin, print} = " + canonical(getTerm({throwACoin, print})));
print("a + 10 * b % 4 = " + canonical(parse("a + 10 * b % 4")));
print("\"print(parseStatements(\\\"print(\\\\\"that is crazy!\\\\\");\\\"));\" = " + canonical(parseStatements("print(parseStatements(\"print(\\\"that is crazy!\\\");\"));")));
print();

/*******************************************************************************
  evalTerm(term)                // execute a term which represents SetlX statements and/or expressions
*/

print( evalTerm(parse("1 + 5")) ); // 6
evalTerm(parseStatements("print(\"foo\");a := 99 * 2;b:= sin(1);")); // prints foo and sets a, b
print(a); // 198
print(b); // ~0.84
print();

/*******************************************************************************
  isPrime(integer)              // Returns true if n is a prime, false otherwise.
                                // Unlike isProbablePrime() this functions actually
                                // tests all possible factors, therefore has linear
                                // complexity.

  isProbablePrime(integer)      // returns true if `integer' is probably prime, false if it's definitely not prime.
                                // If true, the probability that `integer' is prime exceeds 0.999 999 999.
                                // In other words less than 1 in 1 000 000 000 probable primes is not a prime.
                                // Unlike isPrime() this functions is not deterministic, but has only
                                // constant complexity.

  nextProbablePrime(integer)    // returns the next probable prime greater as `integer'.
                                // The probability that the returned number is not a prime does
                                // not exceed 2**-100.
*/
n := 10123124191203;
print("Is $n$ prime? $isPrime(n)$.");
print("Could $n$ be prime? $isProbablePrime(n)$.");
print("What is next prime after $n$? $nextProbablePrime(n)$.");
print();

/*******************************************************************************
  permutations(collectionValue) // computes all permutations of the element in `collectionValue'
  nextPermutation(list)         // returns the next permutation of the list, om if there `list' already is the last permutation
  shuffle(collectionValue)      // returns a randomly shuffled version of the collectionValue.
  sort(collectionValue)         // returns a sorted version of collectionValue.
*/

print("All permutations of $[1,2,2,3]$ are $permutations([1,2,2,3])$.");
print("Next permutation after $[3,1,2,2]$ is $nextPermutation([3,1,2,2])$.");
print("sorted $[31,1,2,7,99]$ is $sort([31,1,2,7,99])$.");
print("sorted `$\"asdaf22341ad1\"$' is `$sort(\"asdaf22341ad1\")$'.");
print("shuffled [1 .. 5] is $shuffle([1 .. 5])$.");
print("shuffled `$\"this is a test\"$' is `$shuffle(\"this is a test\")$'.");
print();

/*******************************************************************************
  reverse(collectionValue)      : reverse the order of members in `collectionValue'
*/

l := [1..10];
print("$l$ <-> $reverse(l)$");
l := [[x,y] : x in [1..3], y in [2..4]];
print("$l$ <-> $reverse(l)$");
l := "SetlX";
print("$l$ <-> $reverse(l)$");
print();

/*******************************************************************************
  split(string, pattern)        // splits string at pattern into a list of strings
  join(collection, separator)   // returns a string with all the members in `collection' separated by `separator'.
  toLowerCase(string)           // returns String in lower case letters
  toUpperCase(string)           // returns String in upper case letters
  endsWith(string, suffix)      // return true if string ends with prefix
  startsWith(string, prefix)    // return true if string starts with prefix
  trim(string)                  // return a trimmed string
*/

temp := split("from;hell;;I;come", ";");
print(temp);
print(join(temp,";"));
print(split(["foo","bar","blub","ding","dong"],"blub"));
print(toLowerCase("from hell I come"));
print(toUpperCase("from hell I come"));
print(endsWith("this is a test", "not a test"));
print(startsWith("this is a test", "this is"));
print(trim("    this is a test  "));
print();

/*******************************************************************************
  run(command)                  // executes a system command and returns the result as a list of output and error messages
*/

print(run("ls | grep ^s"));
print();

/*******************************************************************************
  assert(condition , message)   // stop execution and display message, if condition evaluates to false
*/

foo := [1 .. 10];
assert(foo == [1,2,3,4,5,6,7,8,9], "assert function works"); // assertion will fail

/*******************************************************************************
  The following functions can only be demonstrated in interactive mode:
  multiLineMode(toggle)         // only accept input after additional new line
  trace(toggle)                 // configures output of all assignments
*/


