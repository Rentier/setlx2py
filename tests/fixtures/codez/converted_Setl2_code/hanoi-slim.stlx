
relation := procedure(p, i, j) {
	return {[a, move(a, i, j)]: a in p | movePossible(a[i], a[j])};
};

move := procedure(triple, i, j) {
	result := triple;
	result[i] := triple[i] - {min(triple[i])};
	result[j] := triple[j] + {min(triple[i])};
	return result;
};

partition := procedure(s1, s2, s3, all) {
	return s1 + s2 + s3 == all && #s1 + #s2 + #s3 == #all;
};

movePossible := procedure(source, target) {
	return min(source + {4}) < min(target + {4});
};

printPath := procedure(path) {
	for (i in [1 .. #path]) {
		t1 := lastChars(path[i][1], 20);
		t2 := lastChars(path[i][2], 20);
		t3 := lastChars(path[i][3], 20);
		print(t1, t2, t3);
	}
};

lastChars := procedure(x, n) {
	s := str(x);
	m := n - #s;
	return m * " " + s;
};

oneStep := procedure(pS, r) {
	return {p + [z]: p in pS, [y, z] in r | p[#p] == y};
};

eliminateCycles := procedure(pS) {
	return {p : p in pS | ( ! (cyclic(p)) )};
};

cyclic := procedure(p) {
	return #{x : x in p} < #p;
};

reachable := procedure(x, y, r) {
	pS := {[x]};
	while (true) {
		old_PS := pS;
		pS := eliminateCycles(pS + oneStep(pS, r));
		p := {p : p in pS | p[#p] == y};
		if (p != {}) {
			return arb(p);
		}
		if (old_PS == pS) {
			return;
		}
	}
};

all := {1, 2, 3};
p := {[s1, s2, s3]: s1 in pow(all), s2 in pow(all), s3 in pow(all) | partition(s1, s2, s3, all)};
print("P = ", p);
r := +/ {relation(p, i, j): i in {1, 2, 3}, j in {1, 2, 3} | i != j};
print("R:");
for ([x, y] in r) {
	print(x, "  ->   ", y);
}
print();
start := [{1, 2, 3}, {}, {}];
goal := [{2}, {1}, {3}];
path := reachable(start, goal, r);
printPath(path);

