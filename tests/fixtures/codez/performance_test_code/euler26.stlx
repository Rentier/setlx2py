//
// Euler problem 26
// """
// A unit fraction contains 1 in the numerator. The decimal representation of the 
// unit fractions with denominators 2 to 10 are given:

//     1/2	= 	0.5
//     1/3	= 	0.(3)
//     1/4	= 	0.25
//     1/5	= 	0.2
//     1/6	= 	0.1(6)
//     1/7	= 	0.(142857)
//     1/8	= 	0.125
//     1/9	= 	0.(1)
//     1/10	= 	0.1

// Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It can be 
// seen that 1/7 has a 6-digit recurring cycle.

// Find the value of d < 1000 for which 1/d contains the longest recurring cycle in 
// its decimal fraction part.
// """ 
//
// This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com).
// See also my SETL page: http://www.hakank.org/setl/

//
// Get the length of the repeating cycle for 1/n
//
get_rep_len := procedure(i) {
    foundRemainders := [0 : k in [1..i+1]];
    value := 1;
    position := 1;
    while (foundRemainders[value+1] == 0 && value != 0) {
        foundRemainders[value+1] := position;
        value := value*10;
        value := value % i;
        position := position+1;
    }

    return(position-foundRemainders[value+1]);

};

is_prime := procedure(n) {
    if (n == 2 || n == 3) {
        return(true);
    }
    if (n % 2 == 0) {
        return(false);
    }
    for (i in [3,5..round(sqrt(n))+1]) {
        if (n % i == 0) {
            return(false);
        }
    }
    return(true);
};

problem26 := procedure() {
    print("Problem 26:");
    max_len := 0;
    max_d := 0;
    for (d in [2..999]) {
        if (is_prime(d)) {
            llen := get_rep_len(d);
            if (llen > max_len) {
                max_len := llen;
                max_d := d;
            }
        }
    }

    print("$max_d$ max_len: $max_len$");

};

problem26();
