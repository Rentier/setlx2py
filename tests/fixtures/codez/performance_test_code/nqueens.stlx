// 
// n-queens problem in SetlX
// 
// One dimensional version of N-queens problem:
// http://en.wikipedia.org/wiki/Eight_queens_puzzle
// 
// This SetlX program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//

// Permutations (exhaustive)
perms := procedure(s) {
  if (s == []) {
    return [[]];
  } else {
    return [ [a]+b : a in s, b in perms([ p : p in s | p != a]) ];
  }

};

// Traditional approach
nqueens1 := procedure(n) {
  c := 0;
  s := {1..n};
  for (q in permutations(s)) {
    if (forall(i in s, j in [i+1..n] | 
               q[i]     != q[j]     &&
               q[i] + i != q[j] + j &&
               q[i] - i != q[j] - j
               )) {
      // print(q);
      c += 1;
    }
  }

  print("It was $c$ solutions.");
  return c;
};

nqueens2 := procedure(n) {
  c := 0;
  s := [1..n];
  q := s;
  while (q != om) {
    if (forall(i in s, j in [i+1..n] | 
               q[i]     != q[j]     &&
               q[i] + i != q[j] + j &&
               q[i] - i != q[j] - j
               )) {
      //print(q);
      c += 1;
    }
    q := nextPermutation(q);
  }

  print("It was $c$ solutions.");
};

// Using perms()
nqueens3 := procedure(n) {
  c := 0;
  s := [1..n];
  for (q in perms({1..n})) {
    if (forall(i in s, j in [i+1..n] | 
               q[i]     != q[j]     &&
               q[i] + i != q[j] + j &&
               q[i] - i != q[j] - j
               )) {
      // print(q);
      c += 1;
    }
  }

  print("It was $c$ solutions.");
  return c;
};

all_different := procedure(x) {
  return #x == #{i : i in x};
};

// alldifferent + permutations()
nqueens4 := procedure(n) {
  c := 0;
  s := [1..n];
  for (q in permutations({1..n})) {
    if (
        all_different([q[i]+i : i in s]) &&
        all_different([q[i]-i : i in s]) 
        ) {
      // print(q);
      c += 1;
    }
  }

  print("It was $c$ solutions.");
  return c;
};


// alldifferent + perms()
nqueens5 := procedure(n) {
  c := 0;
  s := [1..n];
  for (q in perms({1..n})) {
    if (
        all_different([q[i]+i : i in s]) &&
        all_different([q[i]-i : i in s]) 
        ) {
      // print(q);
      c += 1;
    }
  }

  print("It was $c$ solutions.");
  return c;
};

// nextPermutation + all_different
nqueens6 := procedure(n) {
  c := 0;
  s := [1..n];
  q := [1..n];
  while (q != om) {
    if (
        all_different([q[i]+i : i in s]) &&
        all_different([q[i]-i : i in s])
        ) {
      // print(q);
      c += 1;
    }
    q := nextPermutation(q);
  }

  print("It was $c$ solutions.");
  return c;

};

for (n in [8..10]) {
  all := [[1, nqueens1], [2, nqueens2], [3, nqueens3],
          [4, nqueens4], [5, nqueens5], [6, nqueens6] ];
  for ([qq,f] in all) {
    print("nqueens$qq$($n$)");
    f(n);
  }
  print("\n");
}

