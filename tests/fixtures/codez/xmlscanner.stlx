// This program demonstrates the scan statement

// using an extremely limited XML example
str := "<abc/>< def foo=\"bar\" />";

tokens := [];

// create token list
scan (str) using charPos {
    regex '<' :
        tokens += [OpenTag()];
    regex '/>' :
        tokens += [CloseTag()];
    regex '\w+' as [id]:
        tokens += [Id(id)];
    regex '=':
        tokens += [Assign()];
    regex '"(\S+)"' as [_, text]:
        tokens += [String(text)];
    regex '\s+':
        // skip whitespace
    regex '.' as x:
        // match anything unknown
        print(charPos["line"],":",charPos["column"]," unrecognized character `$x[1]$'");
    default :
        print("xml-scanner-error!");
}

//print(tokens);

// recreate input from token list
while (#tokens > 0) {
    match(tokens) {
        // match normal tag
        case [OpenTag(), Id(id), CloseTag() | rest]:
            print("<$id$/>");
            tokens := rest;
        // tag with exactly one attribute
        case [OpenTag(), Id(id), Id(id2), Assign(), String(text), CloseTag() | rest]:
            print("<$id$ $id2$=\"$text$\"/>");
            tokens := rest;
        default:
            print("xml-parser-error!");
            break;
    }
}

